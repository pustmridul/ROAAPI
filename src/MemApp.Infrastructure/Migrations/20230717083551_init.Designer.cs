// <auto-generated />
using System;
using MemApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemApp.Infrastructure.Migrations
{
    [DbContext(typeof(MemDbContext))]
    [Migration("20230717083551_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemApp.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("mem_Menu", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Payment.SubscriptionPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MemberPayment")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisterMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterMemberId");

                    b.ToTable("mem_SubscriptionPayment", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Payment.SubscriptionPaymentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CustomerDue")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegisterMemberID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionFeesId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterMemberID");

                    b.HasIndex("SubscriptionFeesId");

                    b.HasIndex("SubscriptionPaymentId");

                    b.ToTable("mem_SubscriptionPaymentDetail", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("com_RefreshToken", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("mem_Role", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Sale.SaleDetailsTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SaleMasterId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleMasterId");

                    b.HasIndex("ServiceTicketDetailId");

                    b.HasIndex("ServiceTicketTypeId");

                    b.ToTable("mem_SaleDetailsTicket", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Sale.SaleMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpenseAmmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceChargePercent")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatChargePercent")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("MemServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("mem_SaleMaster", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.SubMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("mem_SubMenu", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.TopUp.AccountTopUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembershipNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegisterMemberId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TopUpAmmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VerifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("VerifierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegisterMemberId");

                    b.ToTable("mem_AccountTopUp", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLoginFailedAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LoginFailedAttemptCount")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mem_User", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.UserMenuMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("SubMenuId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("SubMenuId");

                    b.HasIndex("UserId");

                    b.ToTable("com_UserMenuMap", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionNo")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("com_UserPermission", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.UserRoleMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("com_UserRoleMap", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.com.BloodGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mem_BloodGroup", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.com.RolePermissionMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PermissionNo")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("com_RolePermissionMap", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.CategoryPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mem_categoryPattern", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("mem_College", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberActiveStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("mem_MemberActiveStatus", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mem_MemberAddress", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberChildren", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CadetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RegisterMemberID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterMemberID");

                    b.ToTable("mem_memberChildren", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberFeesMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Ammount")
                        .HasColumnType("float");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberFeesTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberShipFeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegisterMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberShipFeeId");

                    b.HasIndex("RegisterMemberId");

                    b.ToTable("mem_MemberFeesMap", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("mem_MemberProfession", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberShipFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Ammount")
                        .HasColumnType("float");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mem_memberShipFees", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("mem_MemberStatus", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryPatternId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isSubscribed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryPatternId");

                    b.ToTable("mem_MemberType", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.RegisterMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Anniversary")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BloodGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CadetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CreditDays")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CusCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CusProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscAllowed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscPrcnt")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HscYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMasterMember")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MemberActiveStatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("MemberAddressID")
                        .HasColumnType("int");

                    b.Property<string>("MemberFullId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MemberProfessionID")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MembershipNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Mrcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Opening")
                        .HasColumnType("datetime2");

                    b.Property<string>("Organaization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("PaidTill")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrvCusID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialaization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Spouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpouseOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("MemberActiveStatusId");

                    b.HasIndex("MemberAddressID");

                    b.HasIndex("MemberProfessionID");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.MemService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("mem_MemService", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Afternoon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AvailabiltyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Evening")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Morning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceTicketId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("WholeDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTicketId");

                    b.ToTable("mem_ServiceAvailability", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAvailability")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MemServiceId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceChargeAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("ServiceChargePercent")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VatChargeAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("VatChargePercent")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("MemServiceId");

                    b.ToTable("mem_ServiceTicket", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceTicketTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTicketId");

                    b.HasIndex("ServiceTicketTypeId");

                    b.ToTable("mem_ServiceTicketDetail", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("mem_ServiceTicketType", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.service.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("mem_MemberServiceType", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.subscription.SubscriptionFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AbroadFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LateFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("SubscribedQuater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscribedYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubscriptionFee")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.ToTable("mem_SubscriptionFees", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.subscription.SubscriptionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("mem_SubscriptionMode", (string)null);
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Payment.SubscriptionPayment", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.RegisterMember", "RegisterMembers")
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("RegisterMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Payment.SubscriptionPaymentDetail", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.RegisterMember", "RegisterMembers")
                        .WithMany("SubscriptionPaymentDetails")
                        .HasForeignKey("RegisterMemberID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.subscription.SubscriptionFees", "SubscriptionFees")
                        .WithMany("SubscriptionPaymentDetails")
                        .HasForeignKey("SubscriptionFeesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.Payment.SubscriptionPayment", "SubscriptionPayments")
                        .WithMany("SubscriptionPaymentDetails")
                        .HasForeignKey("SubscriptionPaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterMembers");

                    b.Navigation("SubscriptionFees");

                    b.Navigation("SubscriptionPayments");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Sale.SaleDetailsTicket", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.Sale.SaleMaster", "SaleMaster")
                        .WithMany("SaleDetailsTickets")
                        .HasForeignKey("SaleMasterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.ser.ServiceTicketDetail", "ServiceTicketDetail")
                        .WithMany("SaleDetailsTickets")
                        .HasForeignKey("ServiceTicketDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.ser.ServiceTicketType", "ServiceTicketType")
                        .WithMany("SaleDetailsTickets")
                        .HasForeignKey("ServiceTicketTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SaleMaster");

                    b.Navigation("ServiceTicketDetail");

                    b.Navigation("ServiceTicketType");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Sale.SaleMaster", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.ser.MemService", "MemServices")
                        .WithMany("SaleMasters")
                        .HasForeignKey("MemServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.service.ServiceType", "ServiceTypes")
                        .WithMany("SaleMasters")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemServices");

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.SubMenu", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.Menu", "Menus")
                        .WithMany("SubMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.TopUp.AccountTopUp", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.RegisterMember", "RegisterMember")
                        .WithMany("AccountTopUps")
                        .HasForeignKey("RegisterMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterMember");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.UserMenuMap", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.Menu", "Menu")
                        .WithMany("UserMenuMaps")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.SubMenu", "SubMenu")
                        .WithMany("UserMenuMaps")
                        .HasForeignKey("SubMenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.User", "User")
                        .WithMany("UserMenuMaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("SubMenu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.UserRoleMap", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberChildren", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.RegisterMember", "RegisterMembers")
                        .WithMany("MemberChildrens")
                        .HasForeignKey("RegisterMemberID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberFeesMap", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.MemberShipFee", "MemberShipFee")
                        .WithMany("MemberFeesMaps")
                        .HasForeignKey("MemberShipFeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.RegisterMember", "RegisterMember")
                        .WithMany("MemberFeesMaps")
                        .HasForeignKey("RegisterMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemberShipFee");

                    b.Navigation("RegisterMember");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberType", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.mem.CategoryPattern", "CategoryPatterns")
                        .WithMany("MemberTypes")
                        .HasForeignKey("CategoryPatternId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoryPatterns");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.RegisterMember", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.com.BloodGroup", "BloodGroup")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("BloodGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.College", "Colleges")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.MemberActiveStatus", "MemberActiveStatus")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("MemberActiveStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.MemberAddress", "MemberAddresss")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("MemberAddressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.MemberProfession", "MemberProfessions")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("MemberProfessionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.mem.MemberStatus", "MemberStatus")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("MemberStatusId");

                    b.HasOne("MemApp.Domain.Entities.mem.MemberType", "MemberTypes")
                        .WithMany("RegisterMembers")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BloodGroup");

                    b.Navigation("Colleges");

                    b.Navigation("MemberActiveStatus");

                    b.Navigation("MemberAddresss");

                    b.Navigation("MemberProfessions");

                    b.Navigation("MemberStatus");

                    b.Navigation("MemberTypes");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.MemService", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.service.ServiceType", "ServiceTypes")
                        .WithMany("MemServices")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceAvailability", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.ser.ServiceTicket", "ServiceTicket")
                        .WithMany("ServiceAvailabilities")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceTicket");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicket", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.ser.MemService", "MemServices")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("MemServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemServices");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketDetail", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.ser.ServiceTicket", "ServiceTicket")
                        .WithMany("ServiceTicketDetails")
                        .HasForeignKey("ServiceTicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.ser.ServiceTicketType", "ServiceTicketType")
                        .WithMany()
                        .HasForeignKey("ServiceTicketTypeId");

                    b.Navigation("ServiceTicket");

                    b.Navigation("ServiceTicketType");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketType", b =>
                {
                    b.HasOne("MemApp.Domain.Entities.ser.MemService", "MemService")
                        .WithMany("ServiceTicketTypes")
                        .HasForeignKey("MemServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemApp.Domain.Entities.service.ServiceType", "ServiceType")
                        .WithMany("ServiceTicketTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemService");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Menu", b =>
                {
                    b.Navigation("SubMenus");

                    b.Navigation("UserMenuMaps");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Payment.SubscriptionPayment", b =>
                {
                    b.Navigation("SubscriptionPaymentDetails");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.Sale.SaleMaster", b =>
                {
                    b.Navigation("SaleDetailsTickets");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.SubMenu", b =>
                {
                    b.Navigation("UserMenuMaps");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.User", b =>
                {
                    b.Navigation("UserMenuMaps");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.com.BloodGroup", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.CategoryPattern", b =>
                {
                    b.Navigation("MemberTypes");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.College", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberActiveStatus", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberAddress", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberProfession", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberShipFee", b =>
                {
                    b.Navigation("MemberFeesMaps");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberStatus", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.MemberType", b =>
                {
                    b.Navigation("RegisterMembers");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.mem.RegisterMember", b =>
                {
                    b.Navigation("AccountTopUps");

                    b.Navigation("MemberChildrens");

                    b.Navigation("MemberFeesMaps");

                    b.Navigation("SubscriptionPaymentDetails");

                    b.Navigation("SubscriptionPayments");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.MemService", b =>
                {
                    b.Navigation("SaleMasters");

                    b.Navigation("ServiceTicketTypes");

                    b.Navigation("ServiceTickets");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicket", b =>
                {
                    b.Navigation("ServiceAvailabilities");

                    b.Navigation("ServiceTicketDetails");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketDetail", b =>
                {
                    b.Navigation("SaleDetailsTickets");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.ser.ServiceTicketType", b =>
                {
                    b.Navigation("SaleDetailsTickets");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.service.ServiceType", b =>
                {
                    b.Navigation("MemServices");

                    b.Navigation("SaleMasters");

                    b.Navigation("ServiceTicketTypes");
                });

            modelBuilder.Entity("MemApp.Domain.Entities.subscription.SubscriptionFees", b =>
                {
                    b.Navigation("SubscriptionPaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
